<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Prototype]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.codeprototype.com/"/>
  <updated>2015-04-05T13:14:05.000Z</updated>
  <id>http://blog.codeprototype.com/</id>
  
  <author>
    <name><![CDATA[Kevin Le]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[A functional nullcheck pattern in JavaScript]]></title>
    <link href="http://blog.codeprototype.com/2015/04/05/a-functional-nullcheck-pattern-in-javascript/"/>
    <id>http://blog.codeprototype.com/2015/04/05/a-functional-nullcheck-pattern-in-javascript/</id>
    <published>2015-04-05T01:15:26.000Z</published>
    <updated>2015-04-05T13:14:05.000Z</updated>
    <content type="html"><![CDATA[<p><a class="jsbin-embed" href="http://jsbin.com/qazive/2/embed?js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a class="jsbin-embed" href="http://jsbin.com/qazive/2/embed?js,output" target="_blank" rel="external">JS Bin</a><script src="http://stat]]>
    </summary>
    
      <category term="javascript, functional" scheme="http://blog.codeprototype.com/tags/javascript-functional/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Transpose a JavaScript array using Ramda JS and ES6 syntax]]></title>
    <link href="http://blog.codeprototype.com/2015/03/24/transpose-a-javascript-array-using-ramda-js-and-es6-syntax/"/>
    <id>http://blog.codeprototype.com/2015/03/24/transpose-a-javascript-array-using-ramda-js-and-es6-syntax/</id>
    <published>2015-03-24T04:15:56.000Z</published>
    <updated>2015-04-05T06:37:05.000Z</updated>
    <content type="html"><![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/transpose-a-javascript-array-using-ramda-js-and-es6-syntax-bfd25529b259" target="_blank" rel="external">https://medium.com/@kevinle/transpose-a-javascript-array-using-ramda-js-and-es6-syntax-bfd25529b259</a></p>
<p>This will be a short post because it will set up for my next much longer post. Basically, I need to write a function that transpose an array. I’d like to use Ramda JS and ES6 syntax.</p>
<p>Of course, someone else already asked and several others already answered the question. But since an answer based on Ramda JS and ES6 has not been answered yet, I chime in.</p>
<p><a href="http://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript/29114344#29114344" target="_blank" rel="external">http://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript/29114344#29114344</a></p>
<p>Here’s my solution:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> transpose = a =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">R</span>.<span class="built_in">map</span>(<span class="built_in">c</span> =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">R</span>.<span class="built_in">map</span>(r =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> r[<span class="built_in">c</span>];</span><br><span class="line">    &#125;, a);</span><br><span class="line">  &#125;, <span class="type">R</span>.keys(a[<span class="number">0</span>]));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">transpose(a)  <span class="comment">//=&gt; [[1,5,9],[2,6,10],[3,7,11],[4,8,12]]</span></span><br></pre></td></tr></table></figure>
<p>And here’s the <a href="http://goo.gl/2N7sPq" target="_blank" rel="external">playground</a> that you can experiment with.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/transpose-a-javascript-array-using-ramda-js-and-es6-syntax-bfd25529b259" target="_bla]]>
    </summary>
    
      <category term="javascript, functional, ramdajs" scheme="http://blog.codeprototype.com/tags/javascript-functional-ramdajs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Functional programming with Ramda]]></title>
    <link href="http://blog.codeprototype.com/2015/03/24/functional-programming-with-ramda/"/>
    <id>http://blog.codeprototype.com/2015/03/24/functional-programming-with-ramda/</id>
    <published>2015-03-24T04:03:08.000Z</published>
    <updated>2015-04-05T06:37:05.000Z</updated>
    <content type="html"><![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/functional-programming-with-ramda-5c56d09c518e" target="_blank" rel="external">https://medium.com/@kevinle/functional-programming-with-ramda-5c56d09c518e</a></p>
<p>I watched this YouTube video <a href="http://www.youtube.com/watch?v=m3svKOdZijA" target="_blank" rel="external">Hey, Underscore, You’re Doing It Wrong</a> given by Brian Lonsdorf. This dude is so smart. Thanks to the fact that he was also very articulate and funny while presenting it, I was able to understand most of it. This kind of drew my interests to Ramda. I started using it. The more I use and get to know Ramda, the more I love it. It allows me to write code so concisely.</p>
<p>But first, there seems to be a problem with the way Ramda implements their <em>R.gt</em> and <em>R.lt</em> (two functions that do <em>greater than</em> and <em>less than</em> comparison respectively). Let’s say I have an array of integers and I want to to filter all elements greater than 10. In the <a href="http://ramdajs.com/docs/#gt" target="_blank" rel="external">documentation</a>, it says this function <em>R.gt</em> (likewise for <em>R.lt</em>, but we’ll just focus on 1 case, because everything about <em>R.gt</em> will apply to <em>R.lt</em>) returns true if the first parameter is greater than the second. This in my opinion cause a problem when I try to create a partial function that takes 1 fewer argument and awaits to be executed when supplied with this remaining argument. This is how I define my <em>gt10</em> function:</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="reserved">var</span> gt10 = R.gt(<span class="number">10</span>); <span class="regexp">//g</span>t10 <span class="keyword">is</span> curried <span class="keyword">or</span> partially applied</span><br><span class="line"><span class="reserved">var</span> myArray = [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">20</span>,<span class="number">22</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x &gt; 10: '</span>, R.filter(gt10, myArray));</span><br><span class="line"><span class="regexp">//</span>This does <span class="keyword">not</span> work.  It returns [<span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<p>What am I doing wrong? When I take a Ramda function <em>R.gt</em> in this case which expects 2 arguments, and I turn it into a new function called <em>gt10</em> which expects only 1 argument. I can do so because of 2 reasons:</p>
<ol>
<li><p>Ramda functions are automatically curried. Later, I will show how I can a function and in order for me to curry it, I have to explicitly call curry on it.</p>
</li>
<li><p>To go from expecting 2 arguments to expecting 1 argument means I have to supply 1 argument. In this case, because I am interested in comparing any input to see if it’s greater than 10, I supply 10 as the argument.</p>
</li>
</ol>
<p>Since currying in Ramda proceeds from right to left, the argument I supply (which is 10) will be the first argument to R.gt. Remember what the doc says, R.gt returns true if the first parameter is greater than the second, so then when I apply gt10 over the map of my array, it would result in the opposite effect. There are a few work-arounds. The first one is kind of counter-intuitive and it’s done as below:</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="reserved">var</span> gt10 = R.lt(<span class="number">10</span>);</span><br><span class="line"><span class="reserved">var</span> myArray = [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">20</span>,<span class="number">22</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x &gt; 10: '</span>, R.filter(gt10, myArray));</span><br></pre></td></tr></table></figure>
<p>The second way:</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="reserved">var</span> myArray = [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">20</span>,<span class="number">22</span>];</span><br><span class="line"><span class="reserved">var</span> gt10 = x =&gt; R.gt(R.__, <span class="number">10</span>)(x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x &gt; 10: '</span>, R.filter(gt10, myArray));</span><br></pre></td></tr></table></figure>
<p>And for the third way, I’ll write a replacement for R.gt myself. Since any function that we write is not auto-curried, I’ll have to curry it myself too. Fortunately, Ramda provides a R.curry. My implementation of the function gt just reverses the role of the first and second arguments from those in Ramda’s R.gt function.</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="reserved">var</span> gt = <span class="function"><span class="params">(lowerBound, input)</span> =&gt;</span> input &gt; lowerBound;</span><br><span class="line"><span class="reserved">var</span> curriedGt = R.curry(gt);</span><br><span class="line"><span class="built_in">console</span>.log(gt(<span class="number">10</span>, <span class="number">11</span>));</span><br><span class="line"><span class="built_in">console</span>.log(curriedGt(<span class="number">10</span>, <span class="number">11</span>));</span><br><span class="line"><span class="built_in">console</span>.log(curriedGt(<span class="number">10</span>)(<span class="number">11</span>));</span><br><span class="line"><span class="reserved">var</span> lt = <span class="function"><span class="params">(upperBound, input)</span> =&gt;</span> input &lt; upperBound;</span><br><span class="line"><span class="reserved">var</span> curriedLt = R.curry(lt);</span><br><span class="line"><span class="reserved">var</span> gt10 = curriedGt(<span class="number">10</span>);</span><br><span class="line"><span class="reserved">var</span> lt20 = curriedLt(<span class="number">20</span>);</span><br><span class="line"><span class="reserved">var</span> between = R.<span class="keyword">and</span>(gt10, lt20);</span><br><span class="line"><span class="reserved">var</span> myArray = [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">20</span>,<span class="number">22</span>];</span><br><span class="line"><span class="built_in">console</span>.log(R.filter(between, myArray));</span><br></pre></td></tr></table></figure>
<iframe width="100%" height="300" src="//jsfiddle.net/kevinle/bjuy00ea/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If the first line seems peculiar to you, it’s because I’m using a couple of new features of ES6. I have been using ES6 and have never since looked back. This first line</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="reserved">var</span> gt = <span class="function"><span class="params">(lowerBound, input)</span> =&gt;</span> input &gt; lowerBound;</span><br></pre></td></tr></table></figure>
<p>essentially is equivalent to the following in ES5:</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gt = <span class="function"><span class="keyword">function</span><span class="params">(lowerBound, input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input &gt; lowerBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In ES6, there are a lot less ceremonies. The keyword <em>function</em> is dropped, and the <em>fat arrow</em> is “borrowed” from CoffeeScript and/or Swift (skinny arrow). The other things that is worth to mention is by currying my <em>gt</em> function, I would be able to call it one time if I supply both arguments, or call it with one argument at a time, but that would require 2 invocations.</p>
<p>So where’s my love for Ramda? I’ll show it to you in next post when I combine it with React. You don’t want to miss the chance to see this pattern that I’ll present.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/functional-programming-with-ramda-5c56d09c518e" target="_blank" rel="external">https:]]>
    </summary>
    
      <category term="javascript, functional, ramdajs" scheme="http://blog.codeprototype.com/tags/javascript-functional-ramdajs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How I write my Angular modules]]></title>
    <link href="http://blog.codeprototype.com/2015/03/22/how-i-write-my-angular-modules/"/>
    <id>http://blog.codeprototype.com/2015/03/22/how-i-write-my-angular-modules/</id>
    <published>2015-03-22T16:11:13.000Z</published>
    <updated>2015-04-05T06:37:05.000Z</updated>
    <content type="html"><![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/how-i-write-my-angular-modules-5cce0dfb2254" target="_blank" rel="external">https://medium.com/@kevinle/how-i-write-my-angular-modules-5cce0dfb2254</a></p>
<p>I used to write my Angular modules as follow:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//In app.js which is my starting (entry) point</span></span><br><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, [...])</span><br><span class="line">    .config(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$routeProvider</span>, <span class="variable">$locationProvider</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .run(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$rootScope</span>, <span class="variable">$route</span>, <span class="variable">$location</span>, editableOptions)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>Then in my controller <em>controller.js</em>:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller.js</span></span><br><span class="line">app.controller(<span class="string">'myController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$scope</span>.foo = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>
<p>And so on for directives and services. Probably not so bad. You probably pick this up from reading post blog like <a href="http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript" target="_blank" rel="external">this</a> and some answers on <a href="http://stackoverflow.com/questions/19957280/angularjs-best-practices-for-module-declaration" target="_blank" rel="external">this StackOverflow question</a> advocates this style.</p>
<p>The only problem is that the variable <em>app</em> now has visibility throughout all my files. To eliminate the usage of this variable <em>app</em>, I do like so:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">angular.module(<span class="string">'myApp'</span>, [...])</span><br><span class="line">    .config(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$routeProvider</span>, <span class="variable">$locationProvider</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .run(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$rootScope</span>, <span class="variable">$route</span>, <span class="variable">$location</span>, editableOptions)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>Then in <em>controller.js</em>:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller.js</span></span><br><span class="line">angular.module(<span class="string">'myApp'</span>).controller(<span class="string">'myController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$scope</span>.foo = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure>
<p>Again, and so on for services and directives. Again probably nothing wrong. But I finally settled on using IIFEs, not just IIFes but I want to eliminate the global variable <em>angular</em> from appearing anywhere in my functions. Let’s look at this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">(module)</span> </span>&#123;</span><br><span class="line"><span class="pi">    'use strict'</span>;</span><br><span class="line">    <span class="built_in">module</span>.config([<span class="string">'$routeProvider'</span>, <span class="string">'$locationProvider'</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span><span class="params">($routeProvider, $locationProvider)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// some code</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]).run([<span class="string">'$rootScope'</span>, <span class="string">'$route'</span>, <span class="string">'$location'</span>, <span class="string">'editableOptions'</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span><span class="params">($rootScope, $route, $location, editableOptions)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// some code</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]);</span><br><span class="line">&#125;)(angular.module(<span class="string">'myApp'</span>, [...]));</span><br></pre></td></tr></table></figure>
<p>Then in <em>controller.js</em>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">(module)</span> </span>&#123;</span><br><span class="line"><span class="pi">    'use strict'</span>;</span><br><span class="line">    <span class="built_in">module</span>.controller(<span class="string">'myController'</span>, [<span class="string">'$scope'</span>, </span><br><span class="line">        <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//some code    </span></span><br><span class="line">        &#125;</span><br><span class="line">    ]);</span><br><span class="line">&#125;)(angular.module(<span class="string">'myApp'</span>));</span><br></pre></td></tr></table></figure>
<p>What’s the improvement here, you ask? No more global variables, even only the well known one <em>angular</em> is no where to be found inside any of the functions. This global variable <em>angular</em> only appears as an argument that gets passed in to the IIFEs.</p>
<p>I am going to stick with this style.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/how-i-write-my-angular-modules-5cce0dfb2254" target="_blank" rel="external">https://m]]>
    </summary>
    
      <category term="angularjs" scheme="http://blog.codeprototype.com/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Later Medium, Hello Hexo]]></title>
    <link href="http://blog.codeprototype.com/2015/03/22/hello-world/"/>
    <id>http://blog.codeprototype.com/2015/03/22/hello-world/</id>
    <published>2015-03-22T14:35:37.000Z</published>
    <updated>2015-03-22T14:35:37.000Z</updated>
    <content type="html"><![CDATA[<p>I only started using <a href="http://medium.com/@kevinle" target="_blank" rel="external">Medium</a> recently, and published my <a href="https://medium.com/@kevinle/host-multiple-sites-using-node-js-fff1ef7d0534" target="_blank" rel="external">first post</a> on March 1st, 2015.  So 3 weeks ago, I didn’t find anything better than Medium and I still don’t.  It is the best option now and probably will be for a long time.  It provides the best writing experience and the design, as everyone will agree, is just beautiful.  But how much longer will Medium continue to be free of charge and at the same time ad-free?  I’m not the first one to <a href="https://medium.com/@itsjoeturner/how-will-medium-make-its-money-eb913127403f" target="_blank" rel="external">ask this question</a>, and <a href="http://www.quora.com/How-does-Medium-plan-to-monetize" target="_blank" rel="external">no one knows the answer</a>.</p>
<p>Then 4 days ago, on March 17th, 2015 this <a href="http://www.sitepoint.com/6-nodejs-static-site-generators/?utm_source=nodeweekly&amp;utm_medium=email" target="_blank" rel="external">article</a> was published on SitePoint.  I checked it out anyway, but didn’t think I would be easily persuaded.  But <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a> is just too tempting.  It has all the features I would want, so I had to convince myself to switch from Medium to using Hexo.  Here’s how I convinced myself:</p>
<ol>
<li>Either I do the switch now or do it many posts later, which would require much bigger efforts.</li>
<li>I cannot use my <a href="https://medium.com/the-story/custom-domains-for-publications-8cb161d9651" target="_blank" rel="external">custom domain</a> on Medium.  Maybe, this is how they’ll make money ?</li>
<li><a href="https://medium.com/@kanyang/how-to-display-code-blocks-in-medium-687b3a14e47a" target="_blank" rel="external">Code blocks</a> on Medium is not as nice.</li>
<li><a href="http://jsfiddle.net/" target="_blank" rel="external">jsfiddle</a>, <a href="http://codepen.io/" target="_blank" rel="external">codepen</a>, etc cannot be embedded on Medium.</li>
</ol>
<p>While Medium might be the best fit for many people, and I plan to continue use it from time to time, I also decide that I will start using <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a> as my primary platform.  So hello <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>.</p>
<p>How can I make up for the lost writing experience that is only available on Medium ?  I use <a href="http://bywordapp.com" target="_blank" rel="external">ByWord</a> on my Mac when I have it with me, but frankly Markdown becomes second nature after a few posts anyway. </p>
<p>I leave the <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> here for anyone who is on the same boat as I was and for my future reference. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I only started using <a href="http://medium.com/@kevinle" target="_blank" rel="external">Medium</a> recently, and published my <a href="h]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Host multiple sites using Node.js]]></title>
    <link href="http://blog.codeprototype.com/2015/03/22/host-multiple-sites-using-nodejs/"/>
    <id>http://blog.codeprototype.com/2015/03/22/host-multiple-sites-using-nodejs/</id>
    <published>2015-03-22T02:27:34.000Z</published>
    <updated>2015-03-22T03:13:53.000Z</updated>
    <content type="html"><![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/host-multiple-sites-using-node-js-fff1ef7d0534" target="_blank" rel="external">https://medium.com/@kevinle/host-multiple-sites-using-node-js-fff1ef7d0534</a>.</p>
<p>This <a href="http://stackoverflow.com/questions/19254583/how-do-i-host-multiple-node-js-sites-on-the-same-ip-server-with-different-domain" target="_blank" rel="external">question</a> was asked on Stackoverflow. Several answers which involved using some sort of proxy or reverse proxy in nginx, including this <a href="https://www.digitalocean.com/community/tutorials/how-to-host-multiple-node-js-applications-on-a-single-vps-with-nginx-forever-and-crontab" target="_blank" rel="external">one</a> from Digital Ocean were given. I prefer to do without having to install either Apache or nginx so here is how I do it.</p>
<p>First create a script that would run on startup:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># An init.d script for running a Node.js process as a service using iptables, forever and bouncy</span></span><br><span class="line"><span class="comment"># Reference:</span></span><br><span class="line"><span class="comment"># 1- https://github.com/nodejitsu/forever</span></span><br><span class="line"><span class="comment"># 2- https://www.exratione.com/2013/02/nodejs-and-forever-as-a-service-simple-upstart-and-init-scripts-for-ubuntu/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /home/kle/.nvm/nvm.sh</span><br><span class="line">NAME=<span class="string">"Script for all NodeJS apps"</span></span><br><span class="line">NVM_VERSION=<span class="string">"v0.10.31"</span></span><br><span class="line">NVM_CURRENT=$(nvm current)</span><br><span class="line"><span class="comment">####NVM_VERSION=$(grep -o "v.*$" &lt;&lt;&lt;"$NVM_CURRENT")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$NAME</span>"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">##### First, route all traffic to 80 to 8000 which is where bouncy runs</span></span><br><span class="line">    sudo iptables -t nat -A PREROUTING -p tcp --dport <span class="number">80</span> -j REDIRECT --to-port <span class="number">8000</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">##### Second, run bouncy at port 8000 which routes traffic according to routes.json in bouncy directory</span></span><br><span class="line">    <span class="variable">$NVM_DIR</span>/<span class="variable">$NVM_VERSION</span>/bin/forever start --spinSleepTime <span class="number">10000</span> <span class="variable">$NVM_DIR</span>/<span class="variable">$NVM_VERSION</span>/bin/bouncy /home/kle/projects/bouncy/routes.json <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##### Run application1 on port 5000</span></span><br><span class="line">    <span class="built_in">cd</span> /home/kle/projects/app1</span><br><span class="line">    <span class="variable">$NVM_DIR</span>/<span class="variable">$NVM_VERSION</span>/bin/forever start server.js</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##### Run application2 on port 5001</span></span><br><span class="line">    <span class="built_in">cd</span> /home/kle/projects/app2</span><br><span class="line">    <span class="variable">$NVM_DIR</span>/<span class="variable">$NVM_VERSION</span>/bin/forever start server.js</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##### Set current directory back to ~</span></span><br><span class="line">    <span class="built_in">cd</span> ~</span><br><span class="line">    RETVAL=$?</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Shutting down <span class="variable">$NAME</span>"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">##### Undo line 18 above</span></span><br><span class="line">    sudo iptables -t nat -D PREROUTING -p tcp --dport <span class="number">80</span> -j REDIRECT --to-port <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##### stop all forever processes</span></span><br><span class="line">    <span class="variable">$NVM_DIR</span>/<span class="variable">$NVM_VERSION</span>/bin/forever stopall</span><br><span class="line">    </span><br><span class="line">    RETVAL=$?</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$NAME</span> is running."</span></span><br><span class="line">    <span class="variable">$NVM_DIR</span>/<span class="variable">$NVM_VERSION</span>/bin/forever list</span><br><span class="line">    RETVAL=$?</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        restart</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: &#123;start|stop|status|restart&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure>
<p>Save this script to <strong>/etc/init.d</strong> or create a symbolic link in <strong>/etc/init.d</strong> that points to that script.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: <span class="built_in">cd</span> /etc/init.d</span><br><span class="line">$: sudo ln <span class="operator">-s</span> ~/startup/node-apps-startup.sh node-apps</span><br><span class="line">$: sudo update-rc.d node-apps defaults</span><br><span class="line">$: sudo update-rc.d node-apps <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
<p>Also make sure that you install <a href="https://github.com/foreverjs/forever" target="_blank" rel="external">forever</a> and <a href="https://github.com/substack/bouncy" target="_blank" rel="external">bouncy</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: npm install -g forever</span><br><span class="line">$: npm install -g bouncy</span><br></pre></td></tr></table></figure>
<p>In the bouncy directory, create a file called <strong>routes.json</strong> like this</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    “app1.domain.com" : 5000,    </span><br><span class="line">    “app2.domain.com" : 5001</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As I commented inline in the startup script above, the <strong>iptables</strong> command routes all traffic from port 80 to port 8000 where <strong>bouncy</strong> runs. There are many guides and tutorials on <strong>iptables</strong> which is a fairly powerful and complicated firewall tool, but for me this <a href="http://www.debuntu.org/how-to-redirecting-network-traffic-to-a-new-ip-using-iptables/" target="_blank" rel="external">one guide</a> seems to make it easy for me to understand. Since this involves port 80, a <strong>sudo</strong> elevation level is required. <strong>bouncy</strong> then based on its <strong>routes.json</strong> mapping, pipes traffic to the right endpoints. So I can easily keep track of all of my Node.js applications, I randomly pick the number 5000 and let this be the starting port where my app1, app2, etc run on.</p>
<p>In the above example, I have app1.domain.com and app2.domain.com subdomains A records created with my DNS management provider, and they all point to the same IP address of my VPS server.</p>
<p>Lastly, here are a couple of applications that I’m currently working on but prove that the above approach does work:</p>
<p><a href="http://react-mui-auth.codeprototype.com/" target="_blank" rel="external">http://react-mui-auth.codeprototype.com/</a></p>
<p><a href="http://connect5.codeprototype.com/" target="_blank" rel="external">http://connect5.codeprototype.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Reposting from <a href="https://medium.com/@kevinle/host-multiple-sites-using-node-js-fff1ef7d0534" target="_blank" rel="external">https:]]>
    </summary>
    
  </entry>
  
</feed>